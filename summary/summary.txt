На Хабре уже есть довольно богатый материал на тему деревьев отрезков.
Я решил реализовать эту структуру в Erlang. Хочу поделиться некоторыми соображениями,
которыми я руководствовался при реализации

Мы будем создавать обобщённую структуру данных - чтобы
пользователь имел возможность определить нужные ему операции на дереве отрезков.

Начнём с простой и довольно отдалённой подзадачи: реализуем функцию попарного объединения соседних элементов списка 
(например, список [A, B, C, D, E, F] должен превратится в [{A,B}, {C,D}, {E,F}])

%% точка входа
pairs(List) ->
        pairs(List, []).
%% если список пустой - возвращаем аккумулирющий список 
%% (в обратном порядке)
pairs([], Acc) ->
        lists:reverse(Acc);
%% если в списке только один элемент
%% добавим его в голову аккумулирующего списка
pairs([S], Acc) ->
        pairs([], [S | Acc]);
%% если в списке больше одного элемента - берём 2 первых элемента списка, объединяем
%% и результат добавляем в голову аккумулирующего списка
pairs([A, B | T], Acc) ->
        pairs(T, [{A,B} | Acc]).

(Конечно, функцию pairs можно было определить в терминах левоассоциативной свёртки - lists:foldl/3,
но как по мне, рекурсивное определение функции вместе с сопоставлением с образцом - делают код более читабельным)

А что если созданный список пар снова подать на вход в функцию pairs?
(например, [{A,B}, {C,D}, {E,F}] превратится в [{{A,B},{C,D}}, {E,F}])
И повторять эту процедуру пока не получим список из одного элемента:
[{{A,B},{C,D}}, {E,F}] превратится в [{{{A,B},{C,D}},{E,F}}]
Полученый таким образом единственный элемент результирующего списка является двоичным деревом.

Таким образом, функцию pairs очень легко превратить в функцию построения двоичного дерева: 

tree(List) ->
        tree(List, []).
%% если результирующий список содержит больше одного элемента - значит нужно продолжить построение дерева
tree([], Acc) when length(Acc) > 1 ->
        tree(lists:reverse(Acc), []);
%% если в результирующем списке один элемент - значит дерево построено
tree([], [Tree]) ->
        Tree;
tree([S], Acc) ->
        tree([], [S | Acc]);
tree([A, B | T], Acc) ->
        tree(T, [{A,B} | Acc]).

Итак, дерево уже умеем построить. Самое время подумать о том, какую информацию мы будем хранить в узлах дерева.

Каждый узел будет содержать: левое и правое поддерево, интервал который покрывается узелом (является объединением интервалов левого и 
правого поддеревьев), а также значение операции на даном интервале. Для описания структур будем использовать записи

1) Интервал:
-record(interval, {left, right}).
%% нам понадобится константа для пустого интервала
-define(EMPTY_INTERVAL, null).

2) Узел:
-record(node, {left, right, val, interval}).
%% также понадобится константа для отсутствующего поддерева
-define(EMPTY_CHILD, null).

Чтоб не создавать лишних сущностей, лист дерева отрезков можно определить в терминах описанных выше записей.
Листом будем называть узел, у интервала которого left и right равны. Лист не имеет поддеревьев, поэтому значением поля right будет ?EMPTY_CHILD,
а в поле left будем хранить соответствующий листу элемент входной последовательнрсти (пригодится для операции update).

Построение дерева отрезков




Хоть, как по мне, синтаксис записей в Эрланге довольно неуклюжый, но всё же их использование помогает в понимании кода.
